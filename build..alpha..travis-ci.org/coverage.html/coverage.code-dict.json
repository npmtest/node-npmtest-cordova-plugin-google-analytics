{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-google-analytics/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_google_analytics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-google-analytics/lib.npmtest_cordova_plugin_google_analytics.js":"/* istanbul instrument in package npmtest_cordova_plugin_google_analytics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_google_analytics = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_google_analytics = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-google-analytics/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-google-analytics && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_google_analytics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_google_analytics\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_google_analytics.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_google_analytics.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_google_analytics.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_google_analytics.__dirname + '/lib.npmtest_cordova_plugin_google_analytics.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-google-analytics/node_modules/cordova-plugin-google-analytics/browser/UniversalAnalyticsProxy.js":"function UniversalAnalyticsProxy() {\n  this._isDebug = false;\n  this._isEcommerceRequired = false;\n  this._trackingId = null;\n\n  var namespace = window.GoogleAnalyticsObject || 'nativeGa';\n  loadGoogleAnalytics.call(this, namespace);\n\n  bindAll(this, [\n    '_ensureEcommerce',\n    '_uncaughtExceptionHandler',\n    'addCustomDimension',\n    'addTransaction',\n    'addTransactionItem',\n    'debugMode',\n    'enableUncaughtExceptionReporting',\n    'setAllowIDFACollection',\n    'setAnonymizeIp',\n    'setAppVersion',\n    'setOptOut',\n    'setUserId',\n    'getVar',\n    'startTrackerWithId',\n    'trackEvent',\n    'trackException',\n    'trackMetric',\n    'trackTiming',\n    'trackView'\n  ]);\n}\n\nUniversalAnalyticsProxy.prototype = {\n  startTrackerWithId: wrap(function (trackingId) {\n    this._trackingId = trackingId;\n\n    this._ga('create', {\n      trackingId: trackingId,\n      cookieDomain: 'auto'\n    });\n    this._ga('set', 'appName', document.title);\n  }),\n\n  setUserId: wrap(function (userId) {\n    this._ga('set', 'userId', userId);\n  }),\n\n  setAnonymizeIp: wrap(function (anonymize) {\n    this._ga('set', 'anonymizeIp', anonymize);\n  }),\n\n  setOptOut: wrap(function (optout) {\n    if (!this._trackingId) {\n      throw new Error('TrackingId not available');\n    }\n    window['ga-disable-' + this._trackingId] = optout;\n  }),\n\n  setAppVersion: wrap(function (version) {\n    this._ga('set', 'appVersion', version);\n  }),\n\n  setAllowIDFACollection: wrap(function (enable) {\n    // Not supported by browser platofrm\n  }),\n\n  getVar: wrap(function(param){\n    this._ga('get', param);\n  }),\n\n  debugMode: wrap(function () {\n    this._isDebug = true;\n  }),\n\n  addCustomDimension: wrap(function (key, value) {\n    this._ga('set', 'dimension' + key, value);\n  }),\n\n  trackMetric: wrap(function (key, value) {\n    this._ga('set', 'metric' + key, value);\n  }),\n\n  trackEvent: send(function (category, action, label, value, newSession) {\n    return {\n      hitType: 'event',\n      eventCategory: category,\n      eventAction: action,\n      eventLabel: label,\n      eventValue: value\n    };\n  }),\n\n  trackView: send(function (screen) {\n    return {\n      hitType: 'screenview',\n      screenName: screen\n    };\n  }),\n\n  trackException: send(function (description, fatal) {\n    return {\n      hitType: 'exception',\n      exDescription: description,\n      exFatal: fatal\n    };\n  }),\n\n  trackTiming: send(function (category, intervalInMilliseconds, name, label) {\n    return {\n      hitType: 'timing',\n      timingCategory: category,\n      timingVar: name,\n      timingValue: intervalInMilliseconds,\n      timingLabel: label\n    };\n  }),\n\n  addTransaction: wrap(function (transactionId, affiliation, revenue, tax, shipping, currencyCode) {\n    this._ensureEcommerce();\n    this._ga('ecommerce:addTransaction', {\n      id: transactionId,\n      affiliation: affiliation,\n      revenue: String(revenue),\n      shipping: String(shipping),\n      tax: String(tax),\n      currency: currencyCode\n    });\n  }),\n\n  addTransactionItem: wrap(function (transactionId, name, sku, category, price, quantity, currencyCode) {\n    this._ensureEcommerce();\n    this._ga('ecommerce:addItem', {\n      id: transactionId,\n      name: name,\n      sku: sku,\n      category: category,\n      price: String(price),\n      quantity: String(quantity),\n      currency: currencyCode\n    });\n  }),\n\n  enableUncaughtExceptionReporting: wrap(function (enable) {\n    if (enable) {\n      window.addEventListener('error', this._uncaughtExceptionHandler);\n    } else {\n      window.removeEventListener('error', this._uncaughtExceptionHandler);\n    }\n  }),\n\n  _ga: function () {\n    var args = Array.prototype.slice.call(arguments);\n    if (this._isDebug) {\n      console.debug('UniversalAnalyticsProxy', args);\n    }\n    this._nativeGa.apply(this._nativeGa, args);\n  },\n\n  _uncaughtExceptionHandler: function (err) {\n    this._ga('send', {\n      hitType: 'exception',\n      exDescription: err.message,\n      exFatal: true\n    });\n  },\n\n  _ensureEcommerce: function() {\n    if (this._isEcommerceRequired) return;\n    this._ga('require', 'ecommerce');\n    this._isEcommerceRequired = true;\n  }\n};\n\nfunction send(fn) {\n  return function (success, error, args) {\n    var command = fn.apply(this, args);\n    var timeout = setTimeout(function () {\n      error(new Error('send timeout'));\n    }, 3000);\n\n    command.hitCallback = function hitCallback(result) {\n      clearTimeout(timeout);\n      success(result);\n    };\n\n    try {\n      this._ga('send', command);\n    } catch (err) {\n      clearTimeout(timeout);\n      defer(error, err);\n    }\n  };\n}\n\nfunction bindAll(that, names) {\n  names.forEach(function(name) {\n    if (typeof that[name] === 'function') {\n      that[name] = that[name].bind(that);\n    }\n  });\n}\n\n/**\n * Proceed to the asynchronous loading of Google's analytics.js.\n * Initialize `this._nativeGa` once the script is loaded, using\n * the `onload` callback of the `script` DOM node.\n *\n * @param {string} name Reference (global namespace) of the GA object.\n */\nfunction loadGoogleAnalytics(name) {\n  window.GoogleAnalyticsObject = name;\n\n  window[name] = window[name] || function () {\n    (window[name].q = window[name].q || []).push(arguments);\n  };\n  window[name].l = 1 * new Date();\n  this._nativeGa = window[name];\n\n  var script = document.createElement('script');\n  var scripts = document.getElementsByTagName('script')[0];\n  script.src = 'https://www.google-analytics.com/analytics.js';\n  script.async = 1;\n  scripts.parentNode.insertBefore(script, scripts);\n\n  // analytics.js creates a new object once initialized, update our reference\n  script.onload = (function() { this._nativeGa = window[name]; }).bind(this);\n}\n\nfunction wrap(fn) {\n  return function (success, error, args) {\n    try {\n      fn.apply(this, args);\n      setTimeout(success, 0);\n    } catch (err) {\n      defer(error, err);\n    }\n  };\n}\n\nfunction defer(fn) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  setTimeout(function () {\n    fn.apply(null, args);\n  }, 0);\n}\n\nrequire('cordova/exec/proxy').add('UniversalAnalytics', new UniversalAnalyticsProxy());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-google-analytics/node_modules/cordova-plugin-google-analytics/lavaca/AnalyticsService.js":"define(function(require) {\n\n  var Disposable = require('lavaca/util/Disposable');\n  var Config = require('lavaca/util/Config');\n  var Device = require('lavaca/env/Device');\n  var ga = require('google-analytics');\n\n  var AnalyticsService = Disposable.extend(function AnalyticsService() {\n    Disposable.call(this);\n    this.appId = Config.get('google_analytics_id');\n    this.webId = Config.get('google_analytics_web_id');\n    this.isWeb = this.webId.length;\n\n    if (!Device.isCordova() && this.isWeb) {\n      ga('create', this.webId);\n    }\n\n    document.addEventListener('deviceready', this.init.bind(this), false);\n  }, {\n    ready: false,\n    queue: [],\n    isWeb: false,\n    //isApp: false, //TODO need to research when Device.isCordova() is valid in Lavaca load flow\n    init: function() {\n      if (Device.isCordova() && analytics) {\n        this.ready = true;\n        analytics.startTrackerWithId(this.appId);\n        this.processQueue();\n        this.isWeb = false;\n      }\n    },\n    trackView: function(screen) {\n      if (Device.isCordova()) {\n        if (this.ready) {\n          analytics.trackView(screen);\n        } else {\n          this.queue.push({\n            action: 'trackView',\n            params: [screen]\n          });\n        }\n      } else if (this.isWeb) {\n        ga('send', 'pageview', {\n          'title': screen\n        });\n      }\n    },\n    setUserId: function() {\n      throw 'setUserId is not implemented for Lavaca';\n    },\n    setAnonymizeIp: function() {\n      throw 'setAnonymizeIp is not implemented for Lavaca';\n    },\n    setOptOut: function() {\n      throw 'setOptOut is not implemented for Lavaca';\n    },\n    setAppVersion: function() {\n      throw 'setAppVersion is not implemented for Lavaca';\n    },\n    debugMode: function() {\n      throw 'debugMode is not implemented for Lavaca';\n    },\n    trackEvent: function(category, action, label, value) {\n      action = action || '';\n      label = label || '';\n      value = value || 0;\n      if (Device.isCordova()) {\n        if (this.ready) {\n          analytics.trackEvent(category, action, label, value);\n        } else {\n          this.queue.push({\n            action: 'trackEvent',\n            params: [category, action, label, value]\n          });\n        }\n      } else if (this.isWeb) {\n        ga('send', {\n          'hitType': 'event',\n          'eventCategory': category,\n          'eventAction': action,\n          'eventLabel': label,\n          'eventValue': value\n        });\n      }\n    },\n    trackTiming: function(category, intervalInMilliseconds, name, label) {\n      action = action || '';\n      label = label || '';\n      value = value || 0;\n      if (Device.isCordova()) {\n        if (this.ready) {\n          analytics.trackTiming(category, intervalInMilliseconds, name, label);\n        } else {\n          this.queue.push({\n            action: 'trackTiming',\n            params: [category, intervalInMilliseconds, name, label]\n          });\n        }\n      } else if (this.isWeb) {\n        ga('send', {\n          'hitType': 'timing',\n          'timingCategory': category,\n          'timingValue': intervalInMilliseconds,\n          'timingVar': name,\n          'timingLabel': label\n        });\n      }\n    },\n    processQueue: function() {\n      if (this.queue) {\n        var emptyFunction = function() {};\n        for (var i = 0; i < this.queue.length; ++i) {\n          cordova.exec(emptyFunction, emptyFunction,\n            'UniversalAnalytics', this.queue[i].action, this.queue[i].params);\n        }\n      }\n    }\n  });\n\n  return new AnalyticsService();\n});\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-google-analytics/node_modules/cordova-plugin-google-analytics/www/analytics.js":"function UniversalAnalyticsPlugin() {}\n\nUniversalAnalyticsPlugin.prototype.startTrackerWithId = function(id, dispatchPeriod, success, error) {\n  if (typeof dispatchPeriod === 'undefined' || dispatchPeriod === null) {\n    dispatchPeriod = 30;\n  } else if (typeof dispatchPeriod === 'function' && typeof error === 'undefined') {\n    // Called without dispatchPeriod but with a callback.\n    // Looks like the original API was used so shift parameters over to remain compatible.\n    error = success;\n    success = dispatchPeriod;\n    dispatchPeriod = 30;\n  }  \n  cordova.exec(success, error, 'UniversalAnalytics', 'startTrackerWithId', [id, dispatchPeriod]);\n};\n\nUniversalAnalyticsPlugin.prototype.setAllowIDFACollection = function(enable, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'setAllowIDFACollection', [enable]);\n};\n\nUniversalAnalyticsPlugin.prototype.setUserId = function(id, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'setUserId', [id]);\n};\n\nUniversalAnalyticsPlugin.prototype.setAnonymizeIp = function(anonymize, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'setAnonymizeIp', [anonymize]);\n};\n\nUniversalAnalyticsPlugin.prototype.setOptOut = function(optout, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'setOptOut', [optout]);\n};\n\nUniversalAnalyticsPlugin.prototype.setAppVersion = function(version, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'setAppVersion', [version]);\n};\n\nUniversalAnalyticsPlugin.prototype.getVar = function(variable, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'get', [variable]);\n};\n\n/* enables verbose logging */\nUniversalAnalyticsPlugin.prototype.debugMode = function(success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'debugMode', []);\n};\n\nUniversalAnalyticsPlugin.prototype.trackMetric = function(key, value, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'trackMetric', [key, value]);\n};\n\nUniversalAnalyticsPlugin.prototype.trackView = function(screen, campaignUrl, newSession, success, error) {\n  if (typeof campaignUrl === 'undefined' || campaignUrl === null) {\n    campaignUrl = '';\n  }\n\n  if (typeof newSession === 'undefined' || newSession === null) {\n    newSession = false;\n  }  \n\n  cordova.exec(success, error, 'UniversalAnalytics', 'trackView', [screen, campaignUrl, newSession]);\n};\n\nUniversalAnalyticsPlugin.prototype.addCustomDimension = function(key, value, success, error) {\n  if (typeof key !== \"number\") {\n    throw Error(\"key must be a valid integer not '\" + typeof key + \"'\");\n  }\n  cordova.exec(success, error, 'UniversalAnalytics', 'addCustomDimension', [key, value]);\n};\n\nUniversalAnalyticsPlugin.prototype.trackEvent = function(category, action, label, value, newSession, success, error) {\n  if (typeof label === 'undefined' || label === null) {\n    label = '';\n  }\n  if (typeof value === 'undefined' || value === null) {\n    value = 0;\n  }\n\n  if (typeof newSession === 'undefined' || newSession === null) {\n    newSession = false;\n  }    \n\n  cordova.exec(success, error, 'UniversalAnalytics', 'trackEvent', [category, action, label, value, newSession]);\n};\n\n/**\n * https://developers.google.com/analytics/devguides/collection/android/v3/exceptions\n */\nUniversalAnalyticsPlugin.prototype.trackException = function(description, fatal, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'trackException', [description, fatal]);\n};\n\nUniversalAnalyticsPlugin.prototype.trackTiming = function(category, intervalInMilliseconds, name, label, success, error) {\n  if (typeof intervalInMilliseconds === 'undefined' || intervalInMilliseconds === null) {\n    intervalInMilliseconds = 0;\n  }\n  if (typeof name === 'undefined' || name === null) {\n    name = '';\n  }\n  if (typeof label === 'undefined' || label === null) {\n    label = '';\n  }\n\n  cordova.exec(success, error, 'UniversalAnalytics', 'trackTiming', [category, intervalInMilliseconds, name, label]);\n};\n\n/* Google Analytics e-Commerce Tracking */\n/* https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce */\nUniversalAnalyticsPlugin.prototype.addTransaction = function(transactionId, affiliation, revenue, tax, shipping, currencyCode, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'addTransaction', [transactionId, affiliation, revenue, tax, shipping, currencyCode]);\n};\n\nUniversalAnalyticsPlugin.prototype.addTransactionItem = function(transactionId, name ,sku, category, price, quantity, currencyCode, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'addTransactionItem', [transactionId, name ,sku, category, price, quantity, currencyCode]);\n};\n\n/* automatic uncaught exception tracking */\nUniversalAnalyticsPlugin.prototype.enableUncaughtExceptionReporting = function (enable, success, error) {\n  cordova.exec(success, error, 'UniversalAnalytics', 'enableUncaughtExceptionReporting', [enable]);\n};\n\nmodule.exports = new UniversalAnalyticsPlugin();\n"}